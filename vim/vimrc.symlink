" Inspiration (use gx when on the url to open)
" https://github.com/thoughtbot/dotfiles/blob/master/vimrc
" https://github.com/nicknisi/dotfiles/blob/master/vim/vimrc.symlink
" https://github.com/skwp/dotfiles
" https://github.com/amix/vimrc

" Customization before loading
if filereadable(expand("~/.vimrc.before"))
   source ~/.vimrc.before
endif

"------------------------------------------------------------------------------
" GENERALSTUFF
" INSERTMODE
" DISPLAYSTUFF
" TABSTUFF
" WINDOWSTUFF
" SPELLINGSTUFF
" SEARCHINGSTUFF
" FILESTUFF
" DEVSTUFF
" PLUGINSTUFF
" MISCMAPPINGS


" Load plugins
if filereadable(expand("~/.vim/plugins.vim"))
    source ~/.vim/plugins.vim
endif

set nocompatible      " Because vim is better.
set hidden            " Don't kill my buffers.

" Leader key
let mapleader = " "

" Because editing ~/.vimrc happens a lot.
nnoremap <leader>conf :e! $MYVIMRC<cr>
nnoremap <leader>src :source $MYVIMRC<cr>

" Using the OS clipboard is nice
set clipboard=unnamed

" GENERAlSTUFF
"------------------------------------------------------------------------------

set backspace=2   " Backspace deletes like most programs in insert mode
set nobackup
set nowritebackup
set noswapfile
set history=1000
set ruler         " show the cursor position all the time
set showcmd       " display incomplete commands
set incsearch     " do incremental searching
set autowrite     " Automatically :write before running commands
set autoread      " Detect when files are modified
set wildmenu      " Enhanced completion is nicer
set wildmode=list:longest,full

if !empty(&viminfo)
    set viminfo^=!
endif
set sessionoptions-=options

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

" INSERTMODE
"------------------------------------------------------------------------------
"
" Esc key is too far. Let's make it easy.
" For when I'm not using an emulator with key mapping
inoremap <C-J> <Esc>

" When using iTerm2, map global key of ctrl-return to ❤
" Heart char is U+2764. When sending a heart, it will escape you!
inoremap ❤ <Esc>
" You ARE remapping the Caps Lock key to Control right?

" Because it's always good to save - easily.
inoremap <C-s> <C-o>:update<CR>
noremap <C-s> :update<CR>

" Use one space, not two, after punctuation.
set nojoinspaces

" DISPLAYSTUFF
"------------------------------------------------------------------------------
if &term == 'xterm' || &term == 'screen'
    set t_Co=256
endif

let base16colorspace=256
set background=dark
colorscheme base16-bright

" Display of width and line numbering
set textwidth=80
set colorcolumn=+1
hi ColorColumn ctermbg=234 guibg=#2E3234
set nowrap

set number numberwidth=5
"set relativenumber
set scrolloff=3    " Because seeing more context is a nice thing.
set ttyfast
set visualbell

" If Airline is installed then this will be overwritten by plugin settings
if has('statusline')
    set laststatus=2
    set statusline=%<%f\                     " Filename
    set statusline+=%w%h%m%r                 " Options
    set statusline+=%{fugitive#statusline()} " Git Hotness
    set statusline+=\ [%{&ff}/%Y]            " Filetype
    set statusline+=\ [%{getcwd()}]          " Current dir
    set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
endif

" Always use vertical diffs
set diffopt+=vertical

" GUI settings
if has('gui_running')
    set guioptions-=T           " Remove the toolbar
    set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h16,Menlo\ Regular:h14,Consolas\ Regular:h14,Courier\ New\ Regular:h14
endif

" TABSTUFF
"------------------------------------------------------------------------------
set autoindent     " because code should be indented
set expandtab      " insert spaces instead of <Tab>
set smarttab       " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4      " the visible width of tabs
set softtabstop=4  " edit as if the tabs are 4 characters wide
set shiftwidth=4   " number of spaces to use for indent and unindent
set shiftround     " round indent to a multiple of 'shiftwidth'
set completeopt+=longest

" Display whitespace stuff
set list listchars=tab:»·,trail:·,nbsp:·,eol:¬

" Tab navigation/manipulation. Just like h,j,k,l - but with 't'
nnoremap th  :tabfirst<CR>
nnoremap tj  :tabprev<CR>
nnoremap tk  :tabnext<CR>
nnoremap tl  :tablast<CR>
nnoremap tt  :tabedit<Space>
nnoremap tn  :tabnew<CR>
nnoremap tm  :tabm<Space>
nnoremap tx  :tabclose<CR>


" WINDOWSTUFF (navigation)
"------------------------------------------------------------------------------

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Quicker window/split movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" Faster scrolling with Shift
nnoremap <S-j> 5<C-e>
nnoremap <S-k> 5<C-y>

" Faster buffer switching - but still enjoy unimpaired.
nnoremap <S-h> :bprev<cr>
nnoremap <S-l> :bnext<cr>

" Just like the little "x" on windows. ;)
nnoremap <C-x> :bd<CR>

" SPELLINGSTUFF
"------------------------------------------------------------------------------
" Spelling file can be symlinked
set spellfile=$HOME/.vim-spell-en.utf-8.add

" Autocomplete with dictionary words when spell check is on
set complete+=kspell


" SEARCHINGSTUFF
"------------------------------------------------------------------------------
set ignorecase     " case insensitive searching
set smartcase      " case-sensitive if expresson contains a capital letter
set hlsearch       " highlight search matches
set incsearch      " set incremental search, like modern browsers
set nolazyredraw   " don't redraw while executing macros
set magic          " Set magic on, for regex
set showmatch      " show matching braces
set mat=2          " how many tenths of a second to blink

" Matching search hits to my airline theme.
hi Search term=reverse ctermfg=8 ctermbg=3 guifg=#242424 guibg=#92bd48

" Search within file to quickfix
map <leader>s :vimgrep // <C-r>%<C-b><right><right><right><right><right><right><right><right><right>
"map <leader>g :vimgrep // **/*.<left><left><left><left><left><left><left>

" Find/Replace value under word.
nnoremap <Leader>r :%s/\<<C-r><C-w>\>/

"FILESTUFF
"------------------------------------------------------------------------------
filetype indent plugin on
set encoding=utf-8

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag -Q -l --nocolor --hidden -g "" %s'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" Change the current working directory to the current buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Fix line endings
noremap <leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" DEVSTUFF
"------------------------------------------------------------------------------

" Like a faster update time for plugins like GitGutter
set updatetime=250

" Vdebug
let g:vdebug_options={"port" : 9001}

" Mapping key familiar to debugging in other apps
"<F1> is help
"<F2> is reserved (code cursor for videos)
"<F3> is reserved (os zooming for videos)
let g:vdebug_keymap = {
    \ "run_to_cursor" : "<F4>",
    \ "step_over" : "<F5>",
    \ "step_into" : "<F6>",
    \ "step_out" : "<F7>",
    \ "run" : "<F8>",
    \ "close" : "<F9>",
    \ "detach" : "<F10>",
    \ "set_breakpoint" : "<F11>",
    \ "eval_under_cursor" : "<F12>",
    \ "get_context" : "<F13>",
    \ "eval_visual" : "<Leader>e",
    \}
" Refreshing the (Safari) browser window
noremap <leader><C-r> :silent
            \ !osascript -e 'tell application "Safari"
            \ to set URL of current tab of front window to
            \ (URL of current tab of front window)'<CR>:redraw!<CR>

" Using par executable for wrapping stuff - cleaner!
if executable("/usr/local/bin/par")
    set formatprg=par\ -w40
endif

" PLUGINSTUFF
"------------------------------------------------------------------------------

" ---< CtrlP >---
map <C-f> :CtrlPMRU<CR>
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }

set wildignore+=*/tmp/*,*.so,*.swp,*.zip

" The following only applies when ag (the_silver_searcher) is not installed.
" let g:ctrlp_custom_ignore = {
"   \ 'dir': '\v[\/]\.(git|hg|svn)$',
"   \ }

" ---< NerdTree >---
map <C-t> :NERDTreeToggle<CR>
let g:NERDTreeWinSize=40

" ---< Airline >---
" Make sure to use a patched font https://github.com/ryanoasis/nerd-fonts
if has('macunix')
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    let g:airline_powerline_fonts=1
    let g:airline_left_sep = ''
    let g:airline_left_alt_sep = ''
    let g:airline_right_sep = ''
    let g:airline_right_alt_sep = ''
    let g:airline_symbols.branch = ''
    let g:airline_symbols.readonly = ''
    let g:airline_symbols.linenr = ''

    let g:airline#extensions#tabline#enabled = 1
endif

" ---< Syntastic >---
" Setting up some code checking for Drupal development. This is set by the
" vim drupal plugin if install (see https://www.drupal.org/project/vimrc)
let g:syntastic_php_phpcs_args="--standard=Drupal --extensions=php,module,inc,install,test,profile,theme"

" ---< Tagbar >---
nnoremap <leader>t :TagbarToggle<CR>

" ---< Tabular >---
" https://github.com/godlygeek/tabular
" http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
if exists(":Tabularize")
    nmap <leader>= :Tabularize /=<cr>
    vmap <leader>= :Tabularize /=<cr>
    nmap <leader>: :Tabularize /:\zs<cr>
    vmap <leader>: :Tabularize /:\zs<cr>
endif

" ---< ShowMarks >---
" Tell showmarks to not include the various brace marks (),{}, etc
let g:showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXY"

" ---< vim-textobj-quote >---
" Support for curly quotes on certain file types.
augroup textobj_quote
    autocmd!
    autocmd FileType markdown call textobj#quote#init()
    autocmd FileType textile call textobj#quote#init()
    autocmd FileType text call textobj#quote#init({'educate': 0})
augroup END

" MISCMAPPINGS
"------------------------------------------------------------------------------

" Straighten quotes
nnoremap <leader>" :%s/\(“\\|”\)/"/g<CR>
nnoremap <leader>' :%s/\(‘\\|’\)/'/g<CR>

" Wrap all lines in file within quotes
nnoremap "w :%s/.*/"&"<CR>:noh<CR>

" Open markdown docs within Marked2.app
noremap <leader>p :MarkedOpen<CR>

" Beautify JSON
nnoremap <leader>J :%!python -m json.tool<CR>:set ft=json<CR>

" Insert lines
nnoremap <cr> o<esc>
nnoremap <S-cr> O<esc>

" A quick way to turn off highlighting
map <silent> <leader><cr> :noh<cr>


" Local config
if filereadable($HOME . "/.vimrc.local")
  source ~/.vimrc.local
endif
